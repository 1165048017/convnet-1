// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: convnet_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "convnet_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace config {

namespace {

const ::google::protobuf::Descriptor* Layer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Layer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Layer_Activation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Optimizer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Optimizer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Optimizer_OptimizerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Optimizer_Decay_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Edge_EdgeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Edge_Initialization_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Model_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Model_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatasetConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatasetConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DatasetConfig_DatasetType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_convnet_5fconfig_2eproto() {
  protobuf_AddDesc_convnet_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "convnet_config.proto");
  GOOGLE_CHECK(file != NULL);
  Layer_descriptor_ = file->message_type(0);
  static const int Layer_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, num_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, dropprob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, is_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, activation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, is_spatial_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, is_classifier_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, is_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, gaussian_dropout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, max_act_gaussian_dropout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, gpu_id_),
  };
  Layer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Layer_descriptor_,
      Layer::default_instance_,
      Layer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Layer));
  Layer_Activation_descriptor_ = Layer_descriptor_->enum_type(0);
  Optimizer_descriptor_ = file->message_type(1);
  static const int Optimizer_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, optimizer_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, epsilon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, epsilon_decay_timescale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, initial_momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, final_momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, momentum_transition_timescale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, l2_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, weight_norm_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, weight_norm_constraint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, epsilon_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, minimum_epsilon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, gradient_clip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, lbfgs_memory_),
  };
  Optimizer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Optimizer_descriptor_,
      Optimizer::default_instance_,
      Optimizer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Optimizer));
  Optimizer_OptimizerType_descriptor_ = Optimizer_descriptor_->enum_type(0);
  Optimizer_Decay_descriptor_ = Optimizer_descriptor_->enum_type(1);
  Edge_descriptor_ = file->message_type(2);
  static const int Edge_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, edge_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, initialization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, init_wt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, init_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, weight_optimizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, bias_optimizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, shared_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, block_backprop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, tied_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, has_no_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, scale_gradients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, partial_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, sample_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, response_norm_in_blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, add_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, pow_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, frac_of_filters_response_norm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, polyak_queue_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, gpu_id_),
  };
  Edge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Edge_descriptor_,
      Edge::default_instance_,
      Edge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Edge));
  Edge_EdgeType_descriptor_ = Edge_descriptor_->enum_type(0);
  Edge_Initialization_descriptor_ = Edge_descriptor_->enum_type(1);
  Model_descriptor_ = file->message_type(3);
  static const int Model_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, max_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, display_after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, save_after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, image_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, patch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, print_after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, current_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, checkpoint_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, has_spatial_outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, display_spatial_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, det_classifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, validate_after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, reduce_lr_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, reduce_lr_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, reduce_lr_num_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, reduce_lr_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, smaller_is_better_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, polyak_after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, polyak_queue_size_),
  };
  Model_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Model_descriptor_,
      Model::default_instance_,
      Model_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Model));
  DatasetConfig_descriptor_ = file->message_type(4);
  static const int DatasetConfig_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, data_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, dataset_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, chunk_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, max_reuse_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, pipeline_loads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, randomize_cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, mean_image_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, std_image_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, image_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, normalize_images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, pos_frac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, crop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, dataset_val_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, use_sampling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, randomize_gpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, warp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, has_no_labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, predicted_boxes_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, file_pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, dataset_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, can_translate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, can_flip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, random_access_chunk_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, gpu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, max_dataset_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, raw_image_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, pixelwise_normalize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, pca_noise_stddev_),
  };
  DatasetConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatasetConfig_descriptor_,
      DatasetConfig::default_instance_,
      DatasetConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatasetConfig));
  DatasetConfig_DatasetType_descriptor_ = DatasetConfig_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_convnet_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Layer_descriptor_, &Layer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Optimizer_descriptor_, &Optimizer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Edge_descriptor_, &Edge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Model_descriptor_, &Model::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatasetConfig_descriptor_, &DatasetConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_convnet_5fconfig_2eproto() {
  delete Layer::default_instance_;
  delete Layer_reflection_;
  delete Optimizer::default_instance_;
  delete Optimizer_reflection_;
  delete Edge::default_instance_;
  delete Edge_reflection_;
  delete Model::default_instance_;
  delete Model_reflection_;
  delete DatasetConfig::default_instance_;
  delete DatasetConfig_reflection_;
}

void protobuf_AddDesc_convnet_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024convnet_config.proto\022\006config\"\321\003\n\005Layer"
    "\022\014\n\004name\030\001 \002(\t\022\024\n\014num_channels\030\002 \001(\005\022\020\n\004"
    "size\030\003 \001(\005:\002-1\022\023\n\010dropprob\030\004 \001(\002:\0010\022\027\n\010i"
    "s_input\030\005 \001(\010:\005false\0224\n\nactivation\030\006 \001(\016"
    "2\030.config.Layer.Activation:\006LINEAR\022 \n\021is"
    "_spatial_output\030\007 \001(\010:\005false\022#\n\024is_class"
    "ifier_output\030\010 \001(\010:\005false\022\026\n\007display\030\t \001"
    "(\010:\005false\022\030\n\tis_output\030\n \001(\010:\005false\022\037\n\020g"
    "aussian_dropout\030\013 \001(\010:\005false\022$\n\030max_act_"
    "gaussian_dropout\030\014 \001(\002:\002-1\022\021\n\006gpu_id\030\r \001"
    "(\005:\0010\"[\n\nActivation\022\n\n\006LINEAR\020\000\022\014\n\010LOGIS"
    "TIC\020\001\022\024\n\020RECTIFIED_LINEAR\020\002\022\013\n\007SOFTMAX\020\003"
    "\022\020\n\014SOFTMAX_DIST\020\004\"\323\004\n\tOptimizer\022T\n\016opti"
    "mizer_type\030\001 \001(\0162\037.config.Optimizer.Opti"
    "mizerType:\033STOCHASTIC_GRADIENT_DESCENT\022\022"
    "\n\007epsilon\030\002 \001(\002:\0010\022\"\n\027epsilon_decay_time"
    "scale\030\003 \001(\005:\0010\022\033\n\020initial_momentum\030\004 \001(\002"
    ":\0010\022\031\n\016final_momentum\030\005 \001(\002:\0010\022(\n\035moment"
    "um_transition_timescale\030\006 \001(\005:\0010\022\023\n\010l2_d"
    "ecay\030\007 \001(\002:\0010\022\034\n\021weight_norm_limit\030\010 \001(\002"
    ":\0010\022!\n\026weight_norm_constraint\030\t \001(\002:\0010\0224"
    "\n\repsilon_decay\030\n \001(\0162\027.config.Optimizer"
    ".Decay:\004NONE\022\032\n\017minimum_epsilon\030\013 \001(\002:\0010"
    "\022\031\n\rgradient_clip\030\014 \001(\002:\002-1\022\027\n\014lbfgs_mem"
    "ory\030\r \001(\005:\0010\";\n\rOptimizerType\022\037\n\033STOCHAS"
    "TIC_GRADIENT_DESCENT\020\000\022\t\n\005LBFGS\020\001\"=\n\005Dec"
    "ay\022\010\n\004NONE\020\000\022\r\n\tINVERSE_T\020\001\022\017\n\013EXPONENTI"
    "AL\020\002\022\n\n\006LINEAR\020\003\"\206\010\n\004Edge\022\016\n\006source\030\001 \002("
    "\t\022\014\n\004dest\030\002 \002(\t\022,\n\tedge_type\030\003 \001(\0162\025.con"
    "fig.Edge.EdgeType:\002FC\022\026\n\013kernel_size\030\004 \001"
    "(\005:\0011\022\021\n\006stride\030\005 \001(\005:\0011\022\022\n\007padding\030\006 \001("
    "\005:\0010\022O\n\016initialization\030\007 \001(\0162\033.config.Ed"
    "ge.Initialization:\032DENSE_GAUSSIAN_SQRT_F"
    "AN_IN\022\022\n\007init_wt\030\010 \001(\002:\0011\022\024\n\tinit_bias\030\t"
    " \001(\002:\0010\022+\n\020weight_optimizer\030\n \001(\0132\021.conf"
    "ig.Optimizer\022)\n\016bias_optimizer\030\013 \001(\0132\021.c"
    "onfig.Optimizer\022\032\n\013shared_bias\030\014 \001(\010:\005fa"
    "lse\022\035\n\016block_backprop\030\r \001(\010:\005false\022\017\n\007ti"
    "ed_to\030\016 \001(\t\022\032\n\013has_no_bias\030\017 \001(\010:\005false\022"
    "\032\n\017scale_gradients\030\020 \001(\002:\0011\022\026\n\013partial_s"
    "um\030\021 \001(\005:\0010\022\030\n\rsample_factor\030\022 \001(\005:\0011\022&\n"
    "\027response_norm_in_blocks\030\023 \001(\010:\005false\022\024\n"
    "\tadd_scale\030\024 \001(\002:\0010\022\024\n\tpow_scale\030\025 \001(\002:\001"
    "0\022(\n\035frac_of_filters_response_norm\030\026 \001(\002"
    ":\0010\022\034\n\021polyak_queue_size\030\027 \001(\005:\0010\022\021\n\006gpu"
    "_id\030\030 \001(\005:\0010\"\216\001\n\010EdgeType\022\006\n\002FC\020\000\022\021\n\rCON"
    "VOLUTIONAL\020\001\022\t\n\005LOCAL\020\002\022\013\n\007MAXPOOL\020\003\022\021\n\r"
    "RESPONSE_NORM\020\004\022\014\n\010UPSAMPLE\020\005\022\016\n\nDOWNSAM"
    "PLE\020\006\022\014\n\010RGBTOYUV\020\007\022\020\n\014AVERAGE_POOL\020\010\"\251\001"
    "\n\016Initialization\022\022\n\016DENSE_GAUSSIAN\020\000\022\023\n\017"
    "SPARSE_GAUSSIAN\020\001\022\014\n\010CONSTANT\020\002\022\036\n\032DENSE"
    "_GAUSSIAN_SQRT_FAN_IN\020\003\022\016\n\nPRETRAINED\020\004\022"
    "\021\n\rDENSE_UNIFORM\020\005\022\035\n\031DENSE_UNIFORM_SQRT"
    "_FAN_IN\020\006\"\237\005\n\005Model\022\014\n\004name\030\001 \002(\t\022\034\n\005lay"
    "er\030\002 \003(\0132\r.config.Layer\022\032\n\004edge\030\003 \003(\0132\014."
    "config.Edge\022\014\n\004seed\030\004 \002(\005\022\024\n\010max_iter\030\005 "
    "\001(\005:\002-1\022\031\n\rdisplay_after\030\006 \001(\005:\002-1\022\026\n\nsa"
    "ve_after\030\007 \001(\005:\002-1\022\025\n\nimage_size\030\010 \001(\005:\001"
    "0\022\025\n\npatch_size\030\t \001(\005:\0010\022\027\n\013print_after\030"
    "\n \001(\005:\002-1\022\027\n\014current_iter\030\013 \001(\005:\0010\022\026\n\016ch"
    "eckpoint_dir\030\014 \001(\t\022\"\n\023has_spatial_output"
    "s\030\r \001(\010:\005false\022%\n\026display_spatial_output"
    "\030\016 \001(\010:\005false\022\021\n\ttimestamp\030\017 \003(\t\022\035\n\016det_"
    "classifier\030\020 \001(\010:\005false\022\026\n\007display\030\021 \001(\010"
    ":\005false\022\032\n\016validate_after\030\022 \001(\005:\002-1\022\033\n\020r"
    "educe_lr_factor\030\023 \001(\002:\0011\022\036\n\023reduce_lr_th"
    "reshold\030\024 \001(\002:\0010\022\036\n\023reduce_lr_num_steps\030"
    "\025 \001(\005:\0010\022\030\n\rreduce_lr_max\030\026 \001(\005:\0010\022 \n\021sm"
    "aller_is_better\030\027 \001(\010:\005false\022\027\n\014polyak_a"
    "fter\030\030 \001(\005:\0010\022\034\n\021polyak_queue_size\030\031 \001(\005"
    ":\0010\"\255\010\n\rDatasetConfig\022\020\n\010data_dir\030\001 \002(\t\022"
    "7\n\014dataset_type\030\002 \002(\0162!.config.DatasetCo"
    "nfig.DatasetType\022\025\n\nbatch_size\030\003 \001(\005:\0011\022"
    "\025\n\nchunk_size\030\004 \001(\005:\0011\022\016\n\006labels\030\005 \003(\005\022\032"
    "\n\017max_reuse_count\030\006 \001(\005:\0010\022\035\n\016pipeline_l"
    "oads\030\007 \001(\010:\005false\022\034\n\rrandomize_cpu\030\010 \001(\010"
    ":\005false\022\027\n\017mean_image_file\030\t \001(\t\022\026\n\016std_"
    "image_file\030\n \001(\t\022\022\n\nimage_size\030\013 \001(\005\022\030\n\020"
    "normalize_images\030\014 \001(\010\022\023\n\010pos_frac\030\r \001(\002"
    ":\0011\022\023\n\004crop\030\016 \001(\010:\005false\022;\n\020dataset_val_"
    "type\030\017 \001(\0162!.config.DatasetConfig.Datase"
    "tType\022\024\n\014use_sampling\030\020 \001(\010\022\034\n\rrandomize"
    "_gpu\030\021 \001(\010:\005false\022\023\n\004warp\030\022 \001(\010:\005false\022\034"
    "\n\rhas_no_labels\030\023 \001(\010:\005false\022\034\n\024predicte"
    "d_boxes_file\030\024 \001(\t\022\024\n\014file_pattern\030\025 \001(\t"
    "\022\024\n\014dataset_name\030\026 \003(\t\022\034\n\rcan_translate\030"
    "\027 \001(\010:\005false\022\027\n\010can_flip\030\030 \001(\010:\005false\022#\n"
    "\030random_access_chunk_size\030\031 \001(\005:\0011\022\021\n\006gp"
    "u_id\030\032 \001(\005:\0010\022\033\n\020max_dataset_size\030\033 \001(\005:"
    "\0010\022\031\n\016raw_image_size\030\034 \001(\005:\0010\022\021\n\006stride\030"
    "\035 \001(\005:\0011\022\"\n\023pixelwise_normalize\030\036 \001(\010:\005f"
    "alse\022\033\n\020pca_noise_stddev\030\037 \001(\002:\0010\"\307\001\n\013Da"
    "tasetType\022\t\n\005DUMMY\020\000\022\016\n\nIMAGE_HDF5\020\001\022\027\n\023"
    "IMAGE_HDF5_MULT_POS\020\002\022\025\n\021IMAGENET_CLS_HD"
    "F5\020\003\022\036\n\032IMAGENET_CLS_HDF5_MULT_POS\020\004\022\r\n\t"
    "RAW_IMAGE\020\005\022\010\n\004HDF5\020\006\022\026\n\022IMAGE_POS_NEG_H"
    "DF5\020\007\022\034\n\030RAW_IMAGE_SLIDING_WINDOW\020\010", 3875);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "convnet_config.proto", &protobuf_RegisterTypes);
  Layer::default_instance_ = new Layer();
  Optimizer::default_instance_ = new Optimizer();
  Edge::default_instance_ = new Edge();
  Model::default_instance_ = new Model();
  DatasetConfig::default_instance_ = new DatasetConfig();
  Layer::default_instance_->InitAsDefaultInstance();
  Optimizer::default_instance_->InitAsDefaultInstance();
  Edge::default_instance_->InitAsDefaultInstance();
  Model::default_instance_->InitAsDefaultInstance();
  DatasetConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_convnet_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_convnet_5fconfig_2eproto {
  StaticDescriptorInitializer_convnet_5fconfig_2eproto() {
    protobuf_AddDesc_convnet_5fconfig_2eproto();
  }
} static_descriptor_initializer_convnet_5fconfig_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Layer_Activation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Layer_Activation_descriptor_;
}
bool Layer_Activation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Layer_Activation Layer::LINEAR;
const Layer_Activation Layer::LOGISTIC;
const Layer_Activation Layer::RECTIFIED_LINEAR;
const Layer_Activation Layer::SOFTMAX;
const Layer_Activation Layer::SOFTMAX_DIST;
const Layer_Activation Layer::Activation_MIN;
const Layer_Activation Layer::Activation_MAX;
const int Layer::Activation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Layer::kNameFieldNumber;
const int Layer::kNumChannelsFieldNumber;
const int Layer::kSizeFieldNumber;
const int Layer::kDropprobFieldNumber;
const int Layer::kIsInputFieldNumber;
const int Layer::kActivationFieldNumber;
const int Layer::kIsSpatialOutputFieldNumber;
const int Layer::kIsClassifierOutputFieldNumber;
const int Layer::kDisplayFieldNumber;
const int Layer::kIsOutputFieldNumber;
const int Layer::kGaussianDropoutFieldNumber;
const int Layer::kMaxActGaussianDropoutFieldNumber;
const int Layer::kGpuIdFieldNumber;
#endif  // !_MSC_VER

Layer::Layer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Layer::InitAsDefaultInstance() {
}

Layer::Layer(const Layer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Layer::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_channels_ = 0;
  size_ = -1;
  dropprob_ = 0;
  is_input_ = false;
  activation_ = 0;
  is_spatial_output_ = false;
  is_classifier_output_ = false;
  display_ = false;
  is_output_ = false;
  gaussian_dropout_ = false;
  max_act_gaussian_dropout_ = -1;
  gpu_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Layer::~Layer() {
  SharedDtor();
}

void Layer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Layer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Layer_descriptor_;
}

const Layer& Layer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_convnet_5fconfig_2eproto();
  return *default_instance_;
}

Layer* Layer::default_instance_ = NULL;

Layer* Layer::New() const {
  return new Layer;
}

void Layer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    num_channels_ = 0;
    size_ = -1;
    dropprob_ = 0;
    is_input_ = false;
    activation_ = 0;
    is_spatial_output_ = false;
    is_classifier_output_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    display_ = false;
    is_output_ = false;
    gaussian_dropout_ = false;
    max_act_gaussian_dropout_ = -1;
    gpu_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_channels;
        break;
      }

      // optional int32 num_channels = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_channels_)));
          set_has_num_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional int32 size = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dropprob;
        break;
      }

      // optional float dropprob = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dropprob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropprob_)));
          set_has_dropprob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_input;
        break;
      }

      // optional bool is_input = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_input:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_input_)));
          set_has_is_input();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_activation;
        break;
      }

      // optional .config.Layer.Activation activation = 6 [default = LINEAR];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::Layer_Activation_IsValid(value)) {
            set_activation(static_cast< ::config::Layer_Activation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_spatial_output;
        break;
      }

      // optional bool is_spatial_output = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_spatial_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_spatial_output_)));
          set_has_is_spatial_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_classifier_output;
        break;
      }

      // optional bool is_classifier_output = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_classifier_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_classifier_output_)));
          set_has_is_classifier_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_display;
        break;
      }

      // optional bool display = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &display_)));
          set_has_display();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_output;
        break;
      }

      // optional bool is_output = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_output_)));
          set_has_is_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_gaussian_dropout;
        break;
      }

      // optional bool gaussian_dropout = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gaussian_dropout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gaussian_dropout_)));
          set_has_gaussian_dropout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_max_act_gaussian_dropout;
        break;
      }

      // optional float max_act_gaussian_dropout = 12 [default = -1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_act_gaussian_dropout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_act_gaussian_dropout_)));
          set_has_max_act_gaussian_dropout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_gpu_id;
        break;
      }

      // optional int32 gpu_id = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_id_)));
          set_has_gpu_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 num_channels = 2;
  if (has_num_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_channels(), output);
  }

  // optional int32 size = 3 [default = -1];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // optional float dropprob = 4 [default = 0];
  if (has_dropprob()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dropprob(), output);
  }

  // optional bool is_input = 5 [default = false];
  if (has_is_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_input(), output);
  }

  // optional .config.Layer.Activation activation = 6 [default = LINEAR];
  if (has_activation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->activation(), output);
  }

  // optional bool is_spatial_output = 7 [default = false];
  if (has_is_spatial_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_spatial_output(), output);
  }

  // optional bool is_classifier_output = 8 [default = false];
  if (has_is_classifier_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_classifier_output(), output);
  }

  // optional bool display = 9 [default = false];
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->display(), output);
  }

  // optional bool is_output = 10 [default = false];
  if (has_is_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_output(), output);
  }

  // optional bool gaussian_dropout = 11 [default = false];
  if (has_gaussian_dropout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->gaussian_dropout(), output);
  }

  // optional float max_act_gaussian_dropout = 12 [default = -1];
  if (has_max_act_gaussian_dropout()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->max_act_gaussian_dropout(), output);
  }

  // optional int32 gpu_id = 13 [default = 0];
  if (has_gpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gpu_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Layer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 num_channels = 2;
  if (has_num_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_channels(), target);
  }

  // optional int32 size = 3 [default = -1];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  // optional float dropprob = 4 [default = 0];
  if (has_dropprob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dropprob(), target);
  }

  // optional bool is_input = 5 [default = false];
  if (has_is_input()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_input(), target);
  }

  // optional .config.Layer.Activation activation = 6 [default = LINEAR];
  if (has_activation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->activation(), target);
  }

  // optional bool is_spatial_output = 7 [default = false];
  if (has_is_spatial_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_spatial_output(), target);
  }

  // optional bool is_classifier_output = 8 [default = false];
  if (has_is_classifier_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_classifier_output(), target);
  }

  // optional bool display = 9 [default = false];
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->display(), target);
  }

  // optional bool is_output = 10 [default = false];
  if (has_is_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_output(), target);
  }

  // optional bool gaussian_dropout = 11 [default = false];
  if (has_gaussian_dropout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->gaussian_dropout(), target);
  }

  // optional float max_act_gaussian_dropout = 12 [default = -1];
  if (has_max_act_gaussian_dropout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->max_act_gaussian_dropout(), target);
  }

  // optional int32 gpu_id = 13 [default = 0];
  if (has_gpu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gpu_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Layer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 num_channels = 2;
    if (has_num_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_channels());
    }

    // optional int32 size = 3 [default = -1];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional float dropprob = 4 [default = 0];
    if (has_dropprob()) {
      total_size += 1 + 4;
    }

    // optional bool is_input = 5 [default = false];
    if (has_is_input()) {
      total_size += 1 + 1;
    }

    // optional .config.Layer.Activation activation = 6 [default = LINEAR];
    if (has_activation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activation());
    }

    // optional bool is_spatial_output = 7 [default = false];
    if (has_is_spatial_output()) {
      total_size += 1 + 1;
    }

    // optional bool is_classifier_output = 8 [default = false];
    if (has_is_classifier_output()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool display = 9 [default = false];
    if (has_display()) {
      total_size += 1 + 1;
    }

    // optional bool is_output = 10 [default = false];
    if (has_is_output()) {
      total_size += 1 + 1;
    }

    // optional bool gaussian_dropout = 11 [default = false];
    if (has_gaussian_dropout()) {
      total_size += 1 + 1;
    }

    // optional float max_act_gaussian_dropout = 12 [default = -1];
    if (has_max_act_gaussian_dropout()) {
      total_size += 1 + 4;
    }

    // optional int32 gpu_id = 13 [default = 0];
    if (has_gpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Layer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Layer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Layer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Layer::MergeFrom(const Layer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_num_channels()) {
      set_num_channels(from.num_channels());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_dropprob()) {
      set_dropprob(from.dropprob());
    }
    if (from.has_is_input()) {
      set_is_input(from.is_input());
    }
    if (from.has_activation()) {
      set_activation(from.activation());
    }
    if (from.has_is_spatial_output()) {
      set_is_spatial_output(from.is_spatial_output());
    }
    if (from.has_is_classifier_output()) {
      set_is_classifier_output(from.is_classifier_output());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_is_output()) {
      set_is_output(from.is_output());
    }
    if (from.has_gaussian_dropout()) {
      set_gaussian_dropout(from.gaussian_dropout());
    }
    if (from.has_max_act_gaussian_dropout()) {
      set_max_act_gaussian_dropout(from.max_act_gaussian_dropout());
    }
    if (from.has_gpu_id()) {
      set_gpu_id(from.gpu_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Layer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layer::CopyFrom(const Layer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Layer::Swap(Layer* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(num_channels_, other->num_channels_);
    std::swap(size_, other->size_);
    std::swap(dropprob_, other->dropprob_);
    std::swap(is_input_, other->is_input_);
    std::swap(activation_, other->activation_);
    std::swap(is_spatial_output_, other->is_spatial_output_);
    std::swap(is_classifier_output_, other->is_classifier_output_);
    std::swap(display_, other->display_);
    std::swap(is_output_, other->is_output_);
    std::swap(gaussian_dropout_, other->gaussian_dropout_);
    std::swap(max_act_gaussian_dropout_, other->max_act_gaussian_dropout_);
    std::swap(gpu_id_, other->gpu_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Layer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Layer_descriptor_;
  metadata.reflection = Layer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Optimizer_OptimizerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Optimizer_OptimizerType_descriptor_;
}
bool Optimizer_OptimizerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Optimizer_OptimizerType Optimizer::STOCHASTIC_GRADIENT_DESCENT;
const Optimizer_OptimizerType Optimizer::LBFGS;
const Optimizer_OptimizerType Optimizer::OptimizerType_MIN;
const Optimizer_OptimizerType Optimizer::OptimizerType_MAX;
const int Optimizer::OptimizerType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Optimizer_Decay_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Optimizer_Decay_descriptor_;
}
bool Optimizer_Decay_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Optimizer_Decay Optimizer::NONE;
const Optimizer_Decay Optimizer::INVERSE_T;
const Optimizer_Decay Optimizer::EXPONENTIAL;
const Optimizer_Decay Optimizer::LINEAR;
const Optimizer_Decay Optimizer::Decay_MIN;
const Optimizer_Decay Optimizer::Decay_MAX;
const int Optimizer::Decay_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Optimizer::kOptimizerTypeFieldNumber;
const int Optimizer::kEpsilonFieldNumber;
const int Optimizer::kEpsilonDecayTimescaleFieldNumber;
const int Optimizer::kInitialMomentumFieldNumber;
const int Optimizer::kFinalMomentumFieldNumber;
const int Optimizer::kMomentumTransitionTimescaleFieldNumber;
const int Optimizer::kL2DecayFieldNumber;
const int Optimizer::kWeightNormLimitFieldNumber;
const int Optimizer::kWeightNormConstraintFieldNumber;
const int Optimizer::kEpsilonDecayFieldNumber;
const int Optimizer::kMinimumEpsilonFieldNumber;
const int Optimizer::kGradientClipFieldNumber;
const int Optimizer::kLbfgsMemoryFieldNumber;
#endif  // !_MSC_VER

Optimizer::Optimizer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Optimizer::InitAsDefaultInstance() {
}

Optimizer::Optimizer(const Optimizer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Optimizer::SharedCtor() {
  _cached_size_ = 0;
  optimizer_type_ = 0;
  epsilon_ = 0;
  epsilon_decay_timescale_ = 0;
  initial_momentum_ = 0;
  final_momentum_ = 0;
  momentum_transition_timescale_ = 0;
  l2_decay_ = 0;
  weight_norm_limit_ = 0;
  weight_norm_constraint_ = 0;
  epsilon_decay_ = 0;
  minimum_epsilon_ = 0;
  gradient_clip_ = -1;
  lbfgs_memory_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Optimizer::~Optimizer() {
  SharedDtor();
}

void Optimizer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Optimizer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Optimizer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Optimizer_descriptor_;
}

const Optimizer& Optimizer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_convnet_5fconfig_2eproto();
  return *default_instance_;
}

Optimizer* Optimizer::default_instance_ = NULL;

Optimizer* Optimizer::New() const {
  return new Optimizer;
}

void Optimizer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    optimizer_type_ = 0;
    epsilon_ = 0;
    epsilon_decay_timescale_ = 0;
    initial_momentum_ = 0;
    final_momentum_ = 0;
    momentum_transition_timescale_ = 0;
    l2_decay_ = 0;
    weight_norm_limit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    weight_norm_constraint_ = 0;
    epsilon_decay_ = 0;
    minimum_epsilon_ = 0;
    gradient_clip_ = -1;
    lbfgs_memory_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Optimizer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .config.Optimizer.OptimizerType optimizer_type = 1 [default = STOCHASTIC_GRADIENT_DESCENT];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::Optimizer_OptimizerType_IsValid(value)) {
            set_optimizer_type(static_cast< ::config::Optimizer_OptimizerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_epsilon;
        break;
      }

      // optional float epsilon = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_epsilon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &epsilon_)));
          set_has_epsilon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_epsilon_decay_timescale;
        break;
      }

      // optional int32 epsilon_decay_timescale = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_epsilon_decay_timescale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epsilon_decay_timescale_)));
          set_has_epsilon_decay_timescale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_initial_momentum;
        break;
      }

      // optional float initial_momentum = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_initial_momentum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initial_momentum_)));
          set_has_initial_momentum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_final_momentum;
        break;
      }

      // optional float final_momentum = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_final_momentum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &final_momentum_)));
          set_has_final_momentum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_momentum_transition_timescale;
        break;
      }

      // optional int32 momentum_transition_timescale = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_momentum_transition_timescale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &momentum_transition_timescale_)));
          set_has_momentum_transition_timescale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_l2_decay;
        break;
      }

      // optional float l2_decay = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_l2_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l2_decay_)));
          set_has_l2_decay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_weight_norm_limit;
        break;
      }

      // optional float weight_norm_limit = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight_norm_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_norm_limit_)));
          set_has_weight_norm_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_weight_norm_constraint;
        break;
      }

      // optional float weight_norm_constraint = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight_norm_constraint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_norm_constraint_)));
          set_has_weight_norm_constraint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_epsilon_decay;
        break;
      }

      // optional .config.Optimizer.Decay epsilon_decay = 10 [default = NONE];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_epsilon_decay:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::Optimizer_Decay_IsValid(value)) {
            set_epsilon_decay(static_cast< ::config::Optimizer_Decay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_minimum_epsilon;
        break;
      }

      // optional float minimum_epsilon = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minimum_epsilon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minimum_epsilon_)));
          set_has_minimum_epsilon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_gradient_clip;
        break;
      }

      // optional float gradient_clip = 12 [default = -1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gradient_clip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gradient_clip_)));
          set_has_gradient_clip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_lbfgs_memory;
        break;
      }

      // optional int32 lbfgs_memory = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lbfgs_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lbfgs_memory_)));
          set_has_lbfgs_memory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Optimizer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .config.Optimizer.OptimizerType optimizer_type = 1 [default = STOCHASTIC_GRADIENT_DESCENT];
  if (has_optimizer_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->optimizer_type(), output);
  }

  // optional float epsilon = 2 [default = 0];
  if (has_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->epsilon(), output);
  }

  // optional int32 epsilon_decay_timescale = 3 [default = 0];
  if (has_epsilon_decay_timescale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->epsilon_decay_timescale(), output);
  }

  // optional float initial_momentum = 4 [default = 0];
  if (has_initial_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->initial_momentum(), output);
  }

  // optional float final_momentum = 5 [default = 0];
  if (has_final_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->final_momentum(), output);
  }

  // optional int32 momentum_transition_timescale = 6 [default = 0];
  if (has_momentum_transition_timescale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->momentum_transition_timescale(), output);
  }

  // optional float l2_decay = 7 [default = 0];
  if (has_l2_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->l2_decay(), output);
  }

  // optional float weight_norm_limit = 8 [default = 0];
  if (has_weight_norm_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->weight_norm_limit(), output);
  }

  // optional float weight_norm_constraint = 9 [default = 0];
  if (has_weight_norm_constraint()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->weight_norm_constraint(), output);
  }

  // optional .config.Optimizer.Decay epsilon_decay = 10 [default = NONE];
  if (has_epsilon_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->epsilon_decay(), output);
  }

  // optional float minimum_epsilon = 11 [default = 0];
  if (has_minimum_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->minimum_epsilon(), output);
  }

  // optional float gradient_clip = 12 [default = -1];
  if (has_gradient_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->gradient_clip(), output);
  }

  // optional int32 lbfgs_memory = 13 [default = 0];
  if (has_lbfgs_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lbfgs_memory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Optimizer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .config.Optimizer.OptimizerType optimizer_type = 1 [default = STOCHASTIC_GRADIENT_DESCENT];
  if (has_optimizer_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->optimizer_type(), target);
  }

  // optional float epsilon = 2 [default = 0];
  if (has_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->epsilon(), target);
  }

  // optional int32 epsilon_decay_timescale = 3 [default = 0];
  if (has_epsilon_decay_timescale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->epsilon_decay_timescale(), target);
  }

  // optional float initial_momentum = 4 [default = 0];
  if (has_initial_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->initial_momentum(), target);
  }

  // optional float final_momentum = 5 [default = 0];
  if (has_final_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->final_momentum(), target);
  }

  // optional int32 momentum_transition_timescale = 6 [default = 0];
  if (has_momentum_transition_timescale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->momentum_transition_timescale(), target);
  }

  // optional float l2_decay = 7 [default = 0];
  if (has_l2_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->l2_decay(), target);
  }

  // optional float weight_norm_limit = 8 [default = 0];
  if (has_weight_norm_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->weight_norm_limit(), target);
  }

  // optional float weight_norm_constraint = 9 [default = 0];
  if (has_weight_norm_constraint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->weight_norm_constraint(), target);
  }

  // optional .config.Optimizer.Decay epsilon_decay = 10 [default = NONE];
  if (has_epsilon_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->epsilon_decay(), target);
  }

  // optional float minimum_epsilon = 11 [default = 0];
  if (has_minimum_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->minimum_epsilon(), target);
  }

  // optional float gradient_clip = 12 [default = -1];
  if (has_gradient_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->gradient_clip(), target);
  }

  // optional int32 lbfgs_memory = 13 [default = 0];
  if (has_lbfgs_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lbfgs_memory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Optimizer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .config.Optimizer.OptimizerType optimizer_type = 1 [default = STOCHASTIC_GRADIENT_DESCENT];
    if (has_optimizer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optimizer_type());
    }

    // optional float epsilon = 2 [default = 0];
    if (has_epsilon()) {
      total_size += 1 + 4;
    }

    // optional int32 epsilon_decay_timescale = 3 [default = 0];
    if (has_epsilon_decay_timescale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->epsilon_decay_timescale());
    }

    // optional float initial_momentum = 4 [default = 0];
    if (has_initial_momentum()) {
      total_size += 1 + 4;
    }

    // optional float final_momentum = 5 [default = 0];
    if (has_final_momentum()) {
      total_size += 1 + 4;
    }

    // optional int32 momentum_transition_timescale = 6 [default = 0];
    if (has_momentum_transition_timescale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->momentum_transition_timescale());
    }

    // optional float l2_decay = 7 [default = 0];
    if (has_l2_decay()) {
      total_size += 1 + 4;
    }

    // optional float weight_norm_limit = 8 [default = 0];
    if (has_weight_norm_limit()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float weight_norm_constraint = 9 [default = 0];
    if (has_weight_norm_constraint()) {
      total_size += 1 + 4;
    }

    // optional .config.Optimizer.Decay epsilon_decay = 10 [default = NONE];
    if (has_epsilon_decay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->epsilon_decay());
    }

    // optional float minimum_epsilon = 11 [default = 0];
    if (has_minimum_epsilon()) {
      total_size += 1 + 4;
    }

    // optional float gradient_clip = 12 [default = -1];
    if (has_gradient_clip()) {
      total_size += 1 + 4;
    }

    // optional int32 lbfgs_memory = 13 [default = 0];
    if (has_lbfgs_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lbfgs_memory());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Optimizer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Optimizer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Optimizer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Optimizer::MergeFrom(const Optimizer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optimizer_type()) {
      set_optimizer_type(from.optimizer_type());
    }
    if (from.has_epsilon()) {
      set_epsilon(from.epsilon());
    }
    if (from.has_epsilon_decay_timescale()) {
      set_epsilon_decay_timescale(from.epsilon_decay_timescale());
    }
    if (from.has_initial_momentum()) {
      set_initial_momentum(from.initial_momentum());
    }
    if (from.has_final_momentum()) {
      set_final_momentum(from.final_momentum());
    }
    if (from.has_momentum_transition_timescale()) {
      set_momentum_transition_timescale(from.momentum_transition_timescale());
    }
    if (from.has_l2_decay()) {
      set_l2_decay(from.l2_decay());
    }
    if (from.has_weight_norm_limit()) {
      set_weight_norm_limit(from.weight_norm_limit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_weight_norm_constraint()) {
      set_weight_norm_constraint(from.weight_norm_constraint());
    }
    if (from.has_epsilon_decay()) {
      set_epsilon_decay(from.epsilon_decay());
    }
    if (from.has_minimum_epsilon()) {
      set_minimum_epsilon(from.minimum_epsilon());
    }
    if (from.has_gradient_clip()) {
      set_gradient_clip(from.gradient_clip());
    }
    if (from.has_lbfgs_memory()) {
      set_lbfgs_memory(from.lbfgs_memory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Optimizer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optimizer::CopyFrom(const Optimizer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optimizer::IsInitialized() const {

  return true;
}

void Optimizer::Swap(Optimizer* other) {
  if (other != this) {
    std::swap(optimizer_type_, other->optimizer_type_);
    std::swap(epsilon_, other->epsilon_);
    std::swap(epsilon_decay_timescale_, other->epsilon_decay_timescale_);
    std::swap(initial_momentum_, other->initial_momentum_);
    std::swap(final_momentum_, other->final_momentum_);
    std::swap(momentum_transition_timescale_, other->momentum_transition_timescale_);
    std::swap(l2_decay_, other->l2_decay_);
    std::swap(weight_norm_limit_, other->weight_norm_limit_);
    std::swap(weight_norm_constraint_, other->weight_norm_constraint_);
    std::swap(epsilon_decay_, other->epsilon_decay_);
    std::swap(minimum_epsilon_, other->minimum_epsilon_);
    std::swap(gradient_clip_, other->gradient_clip_);
    std::swap(lbfgs_memory_, other->lbfgs_memory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Optimizer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Optimizer_descriptor_;
  metadata.reflection = Optimizer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Edge_EdgeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_EdgeType_descriptor_;
}
bool Edge_EdgeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Edge_EdgeType Edge::FC;
const Edge_EdgeType Edge::CONVOLUTIONAL;
const Edge_EdgeType Edge::LOCAL;
const Edge_EdgeType Edge::MAXPOOL;
const Edge_EdgeType Edge::RESPONSE_NORM;
const Edge_EdgeType Edge::UPSAMPLE;
const Edge_EdgeType Edge::DOWNSAMPLE;
const Edge_EdgeType Edge::RGBTOYUV;
const Edge_EdgeType Edge::AVERAGE_POOL;
const Edge_EdgeType Edge::EdgeType_MIN;
const Edge_EdgeType Edge::EdgeType_MAX;
const int Edge::EdgeType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Edge_Initialization_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_Initialization_descriptor_;
}
bool Edge_Initialization_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Edge_Initialization Edge::DENSE_GAUSSIAN;
const Edge_Initialization Edge::SPARSE_GAUSSIAN;
const Edge_Initialization Edge::CONSTANT;
const Edge_Initialization Edge::DENSE_GAUSSIAN_SQRT_FAN_IN;
const Edge_Initialization Edge::PRETRAINED;
const Edge_Initialization Edge::DENSE_UNIFORM;
const Edge_Initialization Edge::DENSE_UNIFORM_SQRT_FAN_IN;
const Edge_Initialization Edge::Initialization_MIN;
const Edge_Initialization Edge::Initialization_MAX;
const int Edge::Initialization_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Edge::kSourceFieldNumber;
const int Edge::kDestFieldNumber;
const int Edge::kEdgeTypeFieldNumber;
const int Edge::kKernelSizeFieldNumber;
const int Edge::kStrideFieldNumber;
const int Edge::kPaddingFieldNumber;
const int Edge::kInitializationFieldNumber;
const int Edge::kInitWtFieldNumber;
const int Edge::kInitBiasFieldNumber;
const int Edge::kWeightOptimizerFieldNumber;
const int Edge::kBiasOptimizerFieldNumber;
const int Edge::kSharedBiasFieldNumber;
const int Edge::kBlockBackpropFieldNumber;
const int Edge::kTiedToFieldNumber;
const int Edge::kHasNoBiasFieldNumber;
const int Edge::kScaleGradientsFieldNumber;
const int Edge::kPartialSumFieldNumber;
const int Edge::kSampleFactorFieldNumber;
const int Edge::kResponseNormInBlocksFieldNumber;
const int Edge::kAddScaleFieldNumber;
const int Edge::kPowScaleFieldNumber;
const int Edge::kFracOfFiltersResponseNormFieldNumber;
const int Edge::kPolyakQueueSizeFieldNumber;
const int Edge::kGpuIdFieldNumber;
#endif  // !_MSC_VER

Edge::Edge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Edge::InitAsDefaultInstance() {
  weight_optimizer_ = const_cast< ::config::Optimizer*>(&::config::Optimizer::default_instance());
  bias_optimizer_ = const_cast< ::config::Optimizer*>(&::config::Optimizer::default_instance());
}

Edge::Edge(const Edge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Edge::SharedCtor() {
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  edge_type_ = 0;
  kernel_size_ = 1;
  stride_ = 1;
  padding_ = 0;
  initialization_ = 3;
  init_wt_ = 1;
  init_bias_ = 0;
  weight_optimizer_ = NULL;
  bias_optimizer_ = NULL;
  shared_bias_ = false;
  block_backprop_ = false;
  tied_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_no_bias_ = false;
  scale_gradients_ = 1;
  partial_sum_ = 0;
  sample_factor_ = 1;
  response_norm_in_blocks_ = false;
  add_scale_ = 0;
  pow_scale_ = 0;
  frac_of_filters_response_norm_ = 0;
  polyak_queue_size_ = 0;
  gpu_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Edge::~Edge() {
  SharedDtor();
}

void Edge::SharedDtor() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (dest_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_;
  }
  if (tied_to_ != &::google::protobuf::internal::kEmptyString) {
    delete tied_to_;
  }
  if (this != default_instance_) {
    delete weight_optimizer_;
    delete bias_optimizer_;
  }
}

void Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_descriptor_;
}

const Edge& Edge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_convnet_5fconfig_2eproto();
  return *default_instance_;
}

Edge* Edge::default_instance_ = NULL;

Edge* Edge::New() const {
  return new Edge;
}

void Edge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
    if (has_dest()) {
      if (dest_ != &::google::protobuf::internal::kEmptyString) {
        dest_->clear();
      }
    }
    edge_type_ = 0;
    kernel_size_ = 1;
    stride_ = 1;
    padding_ = 0;
    initialization_ = 3;
    init_wt_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    init_bias_ = 0;
    if (has_weight_optimizer()) {
      if (weight_optimizer_ != NULL) weight_optimizer_->::config::Optimizer::Clear();
    }
    if (has_bias_optimizer()) {
      if (bias_optimizer_ != NULL) bias_optimizer_->::config::Optimizer::Clear();
    }
    shared_bias_ = false;
    block_backprop_ = false;
    if (has_tied_to()) {
      if (tied_to_ != &::google::protobuf::internal::kEmptyString) {
        tied_to_->clear();
      }
    }
    has_no_bias_ = false;
    scale_gradients_ = 1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    partial_sum_ = 0;
    sample_factor_ = 1;
    response_norm_in_blocks_ = false;
    add_scale_ = 0;
    pow_scale_ = 0;
    frac_of_filters_response_norm_ = 0;
    polyak_queue_size_ = 0;
    gpu_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dest;
        break;
      }

      // required string dest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dest().data(), this->dest().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_edge_type;
        break;
      }

      // optional .config.Edge.EdgeType edge_type = 3 [default = FC];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edge_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::Edge_EdgeType_IsValid(value)) {
            set_edge_type(static_cast< ::config::Edge_EdgeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kernel_size;
        break;
      }

      // optional int32 kernel_size = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_)));
          set_has_kernel_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stride;
        break;
      }

      // optional int32 stride = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_padding;
        break;
      }

      // optional int32 padding = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_padding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &padding_)));
          set_has_padding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_initialization;
        break;
      }

      // optional .config.Edge.Initialization initialization = 7 [default = DENSE_GAUSSIAN_SQRT_FAN_IN];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initialization:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::Edge_Initialization_IsValid(value)) {
            set_initialization(static_cast< ::config::Edge_Initialization >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_init_wt;
        break;
      }

      // optional float init_wt = 8 [default = 1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_init_wt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_wt_)));
          set_has_init_wt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_init_bias;
        break;
      }

      // optional float init_bias = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_init_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_bias_)));
          set_has_init_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_weight_optimizer;
        break;
      }

      // optional .config.Optimizer weight_optimizer = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weight_optimizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_optimizer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_bias_optimizer;
        break;
      }

      // optional .config.Optimizer bias_optimizer = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bias_optimizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_optimizer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_shared_bias;
        break;
      }

      // optional bool shared_bias = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shared_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shared_bias_)));
          set_has_shared_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_block_backprop;
        break;
      }

      // optional bool block_backprop = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_backprop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &block_backprop_)));
          set_has_block_backprop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_tied_to;
        break;
      }

      // optional string tied_to = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tied_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tied_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tied_to().data(), this->tied_to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_has_no_bias;
        break;
      }

      // optional bool has_no_bias = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_no_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_no_bias_)));
          set_has_has_no_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_scale_gradients;
        break;
      }

      // optional float scale_gradients = 16 [default = 1];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale_gradients:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_gradients_)));
          set_has_scale_gradients();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_partial_sum;
        break;
      }

      // optional int32 partial_sum = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partial_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partial_sum_)));
          set_has_partial_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_sample_factor;
        break;
      }

      // optional int32 sample_factor = 18 [default = 1];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sample_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_factor_)));
          set_has_sample_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_response_norm_in_blocks;
        break;
      }

      // optional bool response_norm_in_blocks = 19 [default = false];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response_norm_in_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &response_norm_in_blocks_)));
          set_has_response_norm_in_blocks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_add_scale;
        break;
      }

      // optional float add_scale = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_add_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &add_scale_)));
          set_has_add_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_pow_scale;
        break;
      }

      // optional float pow_scale = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pow_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pow_scale_)));
          set_has_pow_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_frac_of_filters_response_norm;
        break;
      }

      // optional float frac_of_filters_response_norm = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_frac_of_filters_response_norm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frac_of_filters_response_norm_)));
          set_has_frac_of_filters_response_norm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_polyak_queue_size;
        break;
      }

      // optional int32 polyak_queue_size = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_polyak_queue_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &polyak_queue_size_)));
          set_has_polyak_queue_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_gpu_id;
        break;
      }

      // optional int32 gpu_id = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_id_)));
          set_has_gpu_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->source(), output);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dest(), output);
  }

  // optional .config.Edge.EdgeType edge_type = 3 [default = FC];
  if (has_edge_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->edge_type(), output);
  }

  // optional int32 kernel_size = 4 [default = 1];
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kernel_size(), output);
  }

  // optional int32 stride = 5 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stride(), output);
  }

  // optional int32 padding = 6 [default = 0];
  if (has_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->padding(), output);
  }

  // optional .config.Edge.Initialization initialization = 7 [default = DENSE_GAUSSIAN_SQRT_FAN_IN];
  if (has_initialization()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->initialization(), output);
  }

  // optional float init_wt = 8 [default = 1];
  if (has_init_wt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->init_wt(), output);
  }

  // optional float init_bias = 9 [default = 0];
  if (has_init_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->init_bias(), output);
  }

  // optional .config.Optimizer weight_optimizer = 10;
  if (has_weight_optimizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->weight_optimizer(), output);
  }

  // optional .config.Optimizer bias_optimizer = 11;
  if (has_bias_optimizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->bias_optimizer(), output);
  }

  // optional bool shared_bias = 12 [default = false];
  if (has_shared_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->shared_bias(), output);
  }

  // optional bool block_backprop = 13 [default = false];
  if (has_block_backprop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->block_backprop(), output);
  }

  // optional string tied_to = 14;
  if (has_tied_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tied_to().data(), this->tied_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->tied_to(), output);
  }

  // optional bool has_no_bias = 15 [default = false];
  if (has_has_no_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->has_no_bias(), output);
  }

  // optional float scale_gradients = 16 [default = 1];
  if (has_scale_gradients()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->scale_gradients(), output);
  }

  // optional int32 partial_sum = 17 [default = 0];
  if (has_partial_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->partial_sum(), output);
  }

  // optional int32 sample_factor = 18 [default = 1];
  if (has_sample_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->sample_factor(), output);
  }

  // optional bool response_norm_in_blocks = 19 [default = false];
  if (has_response_norm_in_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->response_norm_in_blocks(), output);
  }

  // optional float add_scale = 20 [default = 0];
  if (has_add_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->add_scale(), output);
  }

  // optional float pow_scale = 21 [default = 0];
  if (has_pow_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->pow_scale(), output);
  }

  // optional float frac_of_filters_response_norm = 22 [default = 0];
  if (has_frac_of_filters_response_norm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->frac_of_filters_response_norm(), output);
  }

  // optional int32 polyak_queue_size = 23 [default = 0];
  if (has_polyak_queue_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->polyak_queue_size(), output);
  }

  // optional int32 gpu_id = 24 [default = 0];
  if (has_gpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->gpu_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Edge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest(), target);
  }

  // optional .config.Edge.EdgeType edge_type = 3 [default = FC];
  if (has_edge_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->edge_type(), target);
  }

  // optional int32 kernel_size = 4 [default = 1];
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kernel_size(), target);
  }

  // optional int32 stride = 5 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stride(), target);
  }

  // optional int32 padding = 6 [default = 0];
  if (has_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->padding(), target);
  }

  // optional .config.Edge.Initialization initialization = 7 [default = DENSE_GAUSSIAN_SQRT_FAN_IN];
  if (has_initialization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->initialization(), target);
  }

  // optional float init_wt = 8 [default = 1];
  if (has_init_wt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->init_wt(), target);
  }

  // optional float init_bias = 9 [default = 0];
  if (has_init_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->init_bias(), target);
  }

  // optional .config.Optimizer weight_optimizer = 10;
  if (has_weight_optimizer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->weight_optimizer(), target);
  }

  // optional .config.Optimizer bias_optimizer = 11;
  if (has_bias_optimizer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->bias_optimizer(), target);
  }

  // optional bool shared_bias = 12 [default = false];
  if (has_shared_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->shared_bias(), target);
  }

  // optional bool block_backprop = 13 [default = false];
  if (has_block_backprop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->block_backprop(), target);
  }

  // optional string tied_to = 14;
  if (has_tied_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tied_to().data(), this->tied_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->tied_to(), target);
  }

  // optional bool has_no_bias = 15 [default = false];
  if (has_has_no_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->has_no_bias(), target);
  }

  // optional float scale_gradients = 16 [default = 1];
  if (has_scale_gradients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->scale_gradients(), target);
  }

  // optional int32 partial_sum = 17 [default = 0];
  if (has_partial_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->partial_sum(), target);
  }

  // optional int32 sample_factor = 18 [default = 1];
  if (has_sample_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->sample_factor(), target);
  }

  // optional bool response_norm_in_blocks = 19 [default = false];
  if (has_response_norm_in_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->response_norm_in_blocks(), target);
  }

  // optional float add_scale = 20 [default = 0];
  if (has_add_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->add_scale(), target);
  }

  // optional float pow_scale = 21 [default = 0];
  if (has_pow_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->pow_scale(), target);
  }

  // optional float frac_of_filters_response_norm = 22 [default = 0];
  if (has_frac_of_filters_response_norm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->frac_of_filters_response_norm(), target);
  }

  // optional int32 polyak_queue_size = 23 [default = 0];
  if (has_polyak_queue_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->polyak_queue_size(), target);
  }

  // optional int32 gpu_id = 24 [default = 0];
  if (has_gpu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->gpu_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Edge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // required string dest = 2;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest());
    }

    // optional .config.Edge.EdgeType edge_type = 3 [default = FC];
    if (has_edge_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->edge_type());
    }

    // optional int32 kernel_size = 4 [default = 1];
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_size());
    }

    // optional int32 stride = 5 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride());
    }

    // optional int32 padding = 6 [default = 0];
    if (has_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->padding());
    }

    // optional .config.Edge.Initialization initialization = 7 [default = DENSE_GAUSSIAN_SQRT_FAN_IN];
    if (has_initialization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->initialization());
    }

    // optional float init_wt = 8 [default = 1];
    if (has_init_wt()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float init_bias = 9 [default = 0];
    if (has_init_bias()) {
      total_size += 1 + 4;
    }

    // optional .config.Optimizer weight_optimizer = 10;
    if (has_weight_optimizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_optimizer());
    }

    // optional .config.Optimizer bias_optimizer = 11;
    if (has_bias_optimizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias_optimizer());
    }

    // optional bool shared_bias = 12 [default = false];
    if (has_shared_bias()) {
      total_size += 1 + 1;
    }

    // optional bool block_backprop = 13 [default = false];
    if (has_block_backprop()) {
      total_size += 1 + 1;
    }

    // optional string tied_to = 14;
    if (has_tied_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tied_to());
    }

    // optional bool has_no_bias = 15 [default = false];
    if (has_has_no_bias()) {
      total_size += 1 + 1;
    }

    // optional float scale_gradients = 16 [default = 1];
    if (has_scale_gradients()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 partial_sum = 17 [default = 0];
    if (has_partial_sum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partial_sum());
    }

    // optional int32 sample_factor = 18 [default = 1];
    if (has_sample_factor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sample_factor());
    }

    // optional bool response_norm_in_blocks = 19 [default = false];
    if (has_response_norm_in_blocks()) {
      total_size += 2 + 1;
    }

    // optional float add_scale = 20 [default = 0];
    if (has_add_scale()) {
      total_size += 2 + 4;
    }

    // optional float pow_scale = 21 [default = 0];
    if (has_pow_scale()) {
      total_size += 2 + 4;
    }

    // optional float frac_of_filters_response_norm = 22 [default = 0];
    if (has_frac_of_filters_response_norm()) {
      total_size += 2 + 4;
    }

    // optional int32 polyak_queue_size = 23 [default = 0];
    if (has_polyak_queue_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->polyak_queue_size());
    }

    // optional int32 gpu_id = 24 [default = 0];
    if (has_gpu_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Edge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Edge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_edge_type()) {
      set_edge_type(from.edge_type());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_padding()) {
      set_padding(from.padding());
    }
    if (from.has_initialization()) {
      set_initialization(from.initialization());
    }
    if (from.has_init_wt()) {
      set_init_wt(from.init_wt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_init_bias()) {
      set_init_bias(from.init_bias());
    }
    if (from.has_weight_optimizer()) {
      mutable_weight_optimizer()->::config::Optimizer::MergeFrom(from.weight_optimizer());
    }
    if (from.has_bias_optimizer()) {
      mutable_bias_optimizer()->::config::Optimizer::MergeFrom(from.bias_optimizer());
    }
    if (from.has_shared_bias()) {
      set_shared_bias(from.shared_bias());
    }
    if (from.has_block_backprop()) {
      set_block_backprop(from.block_backprop());
    }
    if (from.has_tied_to()) {
      set_tied_to(from.tied_to());
    }
    if (from.has_has_no_bias()) {
      set_has_no_bias(from.has_no_bias());
    }
    if (from.has_scale_gradients()) {
      set_scale_gradients(from.scale_gradients());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_partial_sum()) {
      set_partial_sum(from.partial_sum());
    }
    if (from.has_sample_factor()) {
      set_sample_factor(from.sample_factor());
    }
    if (from.has_response_norm_in_blocks()) {
      set_response_norm_in_blocks(from.response_norm_in_blocks());
    }
    if (from.has_add_scale()) {
      set_add_scale(from.add_scale());
    }
    if (from.has_pow_scale()) {
      set_pow_scale(from.pow_scale());
    }
    if (from.has_frac_of_filters_response_norm()) {
      set_frac_of_filters_response_norm(from.frac_of_filters_response_norm());
    }
    if (from.has_polyak_queue_size()) {
      set_polyak_queue_size(from.polyak_queue_size());
    }
    if (from.has_gpu_id()) {
      set_gpu_id(from.gpu_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Edge::Swap(Edge* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(dest_, other->dest_);
    std::swap(edge_type_, other->edge_type_);
    std::swap(kernel_size_, other->kernel_size_);
    std::swap(stride_, other->stride_);
    std::swap(padding_, other->padding_);
    std::swap(initialization_, other->initialization_);
    std::swap(init_wt_, other->init_wt_);
    std::swap(init_bias_, other->init_bias_);
    std::swap(weight_optimizer_, other->weight_optimizer_);
    std::swap(bias_optimizer_, other->bias_optimizer_);
    std::swap(shared_bias_, other->shared_bias_);
    std::swap(block_backprop_, other->block_backprop_);
    std::swap(tied_to_, other->tied_to_);
    std::swap(has_no_bias_, other->has_no_bias_);
    std::swap(scale_gradients_, other->scale_gradients_);
    std::swap(partial_sum_, other->partial_sum_);
    std::swap(sample_factor_, other->sample_factor_);
    std::swap(response_norm_in_blocks_, other->response_norm_in_blocks_);
    std::swap(add_scale_, other->add_scale_);
    std::swap(pow_scale_, other->pow_scale_);
    std::swap(frac_of_filters_response_norm_, other->frac_of_filters_response_norm_);
    std::swap(polyak_queue_size_, other->polyak_queue_size_);
    std::swap(gpu_id_, other->gpu_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edge_descriptor_;
  metadata.reflection = Edge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Model::kNameFieldNumber;
const int Model::kLayerFieldNumber;
const int Model::kEdgeFieldNumber;
const int Model::kSeedFieldNumber;
const int Model::kMaxIterFieldNumber;
const int Model::kDisplayAfterFieldNumber;
const int Model::kSaveAfterFieldNumber;
const int Model::kImageSizeFieldNumber;
const int Model::kPatchSizeFieldNumber;
const int Model::kPrintAfterFieldNumber;
const int Model::kCurrentIterFieldNumber;
const int Model::kCheckpointDirFieldNumber;
const int Model::kHasSpatialOutputsFieldNumber;
const int Model::kDisplaySpatialOutputFieldNumber;
const int Model::kTimestampFieldNumber;
const int Model::kDetClassifierFieldNumber;
const int Model::kDisplayFieldNumber;
const int Model::kValidateAfterFieldNumber;
const int Model::kReduceLrFactorFieldNumber;
const int Model::kReduceLrThresholdFieldNumber;
const int Model::kReduceLrNumStepsFieldNumber;
const int Model::kReduceLrMaxFieldNumber;
const int Model::kSmallerIsBetterFieldNumber;
const int Model::kPolyakAfterFieldNumber;
const int Model::kPolyakQueueSizeFieldNumber;
#endif  // !_MSC_VER

Model::Model()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Model::InitAsDefaultInstance() {
}

Model::Model(const Model& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Model::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seed_ = 0;
  max_iter_ = -1;
  display_after_ = -1;
  save_after_ = -1;
  image_size_ = 0;
  patch_size_ = 0;
  print_after_ = -1;
  current_iter_ = 0;
  checkpoint_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_spatial_outputs_ = false;
  display_spatial_output_ = false;
  det_classifier_ = false;
  display_ = false;
  validate_after_ = -1;
  reduce_lr_factor_ = 1;
  reduce_lr_threshold_ = 0;
  reduce_lr_num_steps_ = 0;
  reduce_lr_max_ = 0;
  smaller_is_better_ = false;
  polyak_after_ = 0;
  polyak_queue_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Model::~Model() {
  SharedDtor();
}

void Model::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (checkpoint_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete checkpoint_dir_;
  }
  if (this != default_instance_) {
  }
}

void Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Model::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Model_descriptor_;
}

const Model& Model::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_convnet_5fconfig_2eproto();
  return *default_instance_;
}

Model* Model::default_instance_ = NULL;

Model* Model::New() const {
  return new Model;
}

void Model::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    seed_ = 0;
    max_iter_ = -1;
    display_after_ = -1;
    save_after_ = -1;
    image_size_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    patch_size_ = 0;
    print_after_ = -1;
    current_iter_ = 0;
    if (has_checkpoint_dir()) {
      if (checkpoint_dir_ != &::google::protobuf::internal::kEmptyString) {
        checkpoint_dir_->clear();
      }
    }
    has_spatial_outputs_ = false;
    display_spatial_output_ = false;
    det_classifier_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    display_ = false;
    validate_after_ = -1;
    reduce_lr_factor_ = 1;
    reduce_lr_threshold_ = 0;
    reduce_lr_num_steps_ = 0;
    reduce_lr_max_ = 0;
    smaller_is_better_ = false;
    polyak_after_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    polyak_queue_size_ = 0;
  }
  layer_.Clear();
  edge_.Clear();
  timestamp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layer;
        break;
      }

      // repeated .config.Layer layer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layer;
        if (input->ExpectTag(26)) goto parse_edge;
        break;
      }

      // repeated .config.Edge edge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_edge;
        if (input->ExpectTag(32)) goto parse_seed;
        break;
      }

      // required int32 seed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_iter;
        break;
      }

      // optional int32 max_iter = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
          set_has_max_iter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_display_after;
        break;
      }

      // optional int32 display_after = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_after_)));
          set_has_display_after();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_save_after;
        break;
      }

      // optional int32 save_after = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &save_after_)));
          set_has_save_after();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_image_size;
        break;
      }

      // optional int32 image_size = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_image_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_size_)));
          set_has_image_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_patch_size;
        break;
      }

      // optional int32 patch_size = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patch_size_)));
          set_has_patch_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_print_after;
        break;
      }

      // optional int32 print_after = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_print_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_after_)));
          set_has_print_after();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_current_iter;
        break;
      }

      // optional int32 current_iter = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_iter_)));
          set_has_current_iter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_checkpoint_dir;
        break;
      }

      // optional string checkpoint_dir = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkpoint_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checkpoint_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->checkpoint_dir().data(), this->checkpoint_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_has_spatial_outputs;
        break;
      }

      // optional bool has_spatial_outputs = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_spatial_outputs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_spatial_outputs_)));
          set_has_has_spatial_outputs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_display_spatial_output;
        break;
      }

      // optional bool display_spatial_output = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_spatial_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &display_spatial_output_)));
          set_has_display_spatial_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_timestamp;
        break;
      }

      // repeated string timestamp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp(this->timestamp_size() - 1).data(),
            this->timestamp(this->timestamp_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_timestamp;
        if (input->ExpectTag(128)) goto parse_det_classifier;
        break;
      }

      // optional bool det_classifier = 16 [default = false];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_det_classifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &det_classifier_)));
          set_has_det_classifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_display;
        break;
      }

      // optional bool display = 17 [default = false];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &display_)));
          set_has_display();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_validate_after;
        break;
      }

      // optional int32 validate_after = 18 [default = -1];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_validate_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validate_after_)));
          set_has_validate_after();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_reduce_lr_factor;
        break;
      }

      // optional float reduce_lr_factor = 19 [default = 1];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_reduce_lr_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reduce_lr_factor_)));
          set_has_reduce_lr_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_reduce_lr_threshold;
        break;
      }

      // optional float reduce_lr_threshold = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_reduce_lr_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reduce_lr_threshold_)));
          set_has_reduce_lr_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_reduce_lr_num_steps;
        break;
      }

      // optional int32 reduce_lr_num_steps = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reduce_lr_num_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reduce_lr_num_steps_)));
          set_has_reduce_lr_num_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_reduce_lr_max;
        break;
      }

      // optional int32 reduce_lr_max = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reduce_lr_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reduce_lr_max_)));
          set_has_reduce_lr_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_smaller_is_better;
        break;
      }

      // optional bool smaller_is_better = 23 [default = false];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smaller_is_better:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &smaller_is_better_)));
          set_has_smaller_is_better();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_polyak_after;
        break;
      }

      // optional int32 polyak_after = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_polyak_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &polyak_after_)));
          set_has_polyak_after();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_polyak_queue_size;
        break;
      }

      // optional int32 polyak_queue_size = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_polyak_queue_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &polyak_queue_size_)));
          set_has_polyak_queue_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .config.Layer layer = 2;
  for (int i = 0; i < this->layer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layer(i), output);
  }

  // repeated .config.Edge edge = 3;
  for (int i = 0; i < this->edge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->edge(i), output);
  }

  // required int32 seed = 4;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seed(), output);
  }

  // optional int32 max_iter = 5 [default = -1];
  if (has_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_iter(), output);
  }

  // optional int32 display_after = 6 [default = -1];
  if (has_display_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->display_after(), output);
  }

  // optional int32 save_after = 7 [default = -1];
  if (has_save_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->save_after(), output);
  }

  // optional int32 image_size = 8 [default = 0];
  if (has_image_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->image_size(), output);
  }

  // optional int32 patch_size = 9 [default = 0];
  if (has_patch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->patch_size(), output);
  }

  // optional int32 print_after = 10 [default = -1];
  if (has_print_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->print_after(), output);
  }

  // optional int32 current_iter = 11 [default = 0];
  if (has_current_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->current_iter(), output);
  }

  // optional string checkpoint_dir = 12;
  if (has_checkpoint_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checkpoint_dir().data(), this->checkpoint_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->checkpoint_dir(), output);
  }

  // optional bool has_spatial_outputs = 13 [default = false];
  if (has_has_spatial_outputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->has_spatial_outputs(), output);
  }

  // optional bool display_spatial_output = 14 [default = false];
  if (has_display_spatial_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->display_spatial_output(), output);
  }

  // repeated string timestamp = 15;
  for (int i = 0; i < this->timestamp_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->timestamp(i).data(), this->timestamp(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->timestamp(i), output);
  }

  // optional bool det_classifier = 16 [default = false];
  if (has_det_classifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->det_classifier(), output);
  }

  // optional bool display = 17 [default = false];
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->display(), output);
  }

  // optional int32 validate_after = 18 [default = -1];
  if (has_validate_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->validate_after(), output);
  }

  // optional float reduce_lr_factor = 19 [default = 1];
  if (has_reduce_lr_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->reduce_lr_factor(), output);
  }

  // optional float reduce_lr_threshold = 20 [default = 0];
  if (has_reduce_lr_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->reduce_lr_threshold(), output);
  }

  // optional int32 reduce_lr_num_steps = 21 [default = 0];
  if (has_reduce_lr_num_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->reduce_lr_num_steps(), output);
  }

  // optional int32 reduce_lr_max = 22 [default = 0];
  if (has_reduce_lr_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->reduce_lr_max(), output);
  }

  // optional bool smaller_is_better = 23 [default = false];
  if (has_smaller_is_better()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->smaller_is_better(), output);
  }

  // optional int32 polyak_after = 24 [default = 0];
  if (has_polyak_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->polyak_after(), output);
  }

  // optional int32 polyak_queue_size = 25 [default = 0];
  if (has_polyak_queue_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->polyak_queue_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Model::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .config.Layer layer = 2;
  for (int i = 0; i < this->layer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->layer(i), target);
  }

  // repeated .config.Edge edge = 3;
  for (int i = 0; i < this->edge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->edge(i), target);
  }

  // required int32 seed = 4;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seed(), target);
  }

  // optional int32 max_iter = 5 [default = -1];
  if (has_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_iter(), target);
  }

  // optional int32 display_after = 6 [default = -1];
  if (has_display_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->display_after(), target);
  }

  // optional int32 save_after = 7 [default = -1];
  if (has_save_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->save_after(), target);
  }

  // optional int32 image_size = 8 [default = 0];
  if (has_image_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->image_size(), target);
  }

  // optional int32 patch_size = 9 [default = 0];
  if (has_patch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->patch_size(), target);
  }

  // optional int32 print_after = 10 [default = -1];
  if (has_print_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->print_after(), target);
  }

  // optional int32 current_iter = 11 [default = 0];
  if (has_current_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->current_iter(), target);
  }

  // optional string checkpoint_dir = 12;
  if (has_checkpoint_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checkpoint_dir().data(), this->checkpoint_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->checkpoint_dir(), target);
  }

  // optional bool has_spatial_outputs = 13 [default = false];
  if (has_has_spatial_outputs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->has_spatial_outputs(), target);
  }

  // optional bool display_spatial_output = 14 [default = false];
  if (has_display_spatial_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->display_spatial_output(), target);
  }

  // repeated string timestamp = 15;
  for (int i = 0; i < this->timestamp_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp(i).data(), this->timestamp(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->timestamp(i), target);
  }

  // optional bool det_classifier = 16 [default = false];
  if (has_det_classifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->det_classifier(), target);
  }

  // optional bool display = 17 [default = false];
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->display(), target);
  }

  // optional int32 validate_after = 18 [default = -1];
  if (has_validate_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->validate_after(), target);
  }

  // optional float reduce_lr_factor = 19 [default = 1];
  if (has_reduce_lr_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->reduce_lr_factor(), target);
  }

  // optional float reduce_lr_threshold = 20 [default = 0];
  if (has_reduce_lr_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->reduce_lr_threshold(), target);
  }

  // optional int32 reduce_lr_num_steps = 21 [default = 0];
  if (has_reduce_lr_num_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->reduce_lr_num_steps(), target);
  }

  // optional int32 reduce_lr_max = 22 [default = 0];
  if (has_reduce_lr_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->reduce_lr_max(), target);
  }

  // optional bool smaller_is_better = 23 [default = false];
  if (has_smaller_is_better()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->smaller_is_better(), target);
  }

  // optional int32 polyak_after = 24 [default = 0];
  if (has_polyak_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->polyak_after(), target);
  }

  // optional int32 polyak_queue_size = 25 [default = 0];
  if (has_polyak_queue_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->polyak_queue_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Model::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 seed = 4;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seed());
    }

    // optional int32 max_iter = 5 [default = -1];
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional int32 display_after = 6 [default = -1];
    if (has_display_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_after());
    }

    // optional int32 save_after = 7 [default = -1];
    if (has_save_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->save_after());
    }

    // optional int32 image_size = 8 [default = 0];
    if (has_image_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 patch_size = 9 [default = 0];
    if (has_patch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patch_size());
    }

    // optional int32 print_after = 10 [default = -1];
    if (has_print_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->print_after());
    }

    // optional int32 current_iter = 11 [default = 0];
    if (has_current_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_iter());
    }

    // optional string checkpoint_dir = 12;
    if (has_checkpoint_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checkpoint_dir());
    }

    // optional bool has_spatial_outputs = 13 [default = false];
    if (has_has_spatial_outputs()) {
      total_size += 1 + 1;
    }

    // optional bool display_spatial_output = 14 [default = false];
    if (has_display_spatial_output()) {
      total_size += 1 + 1;
    }

    // optional bool det_classifier = 16 [default = false];
    if (has_det_classifier()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool display = 17 [default = false];
    if (has_display()) {
      total_size += 2 + 1;
    }

    // optional int32 validate_after = 18 [default = -1];
    if (has_validate_after()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validate_after());
    }

    // optional float reduce_lr_factor = 19 [default = 1];
    if (has_reduce_lr_factor()) {
      total_size += 2 + 4;
    }

    // optional float reduce_lr_threshold = 20 [default = 0];
    if (has_reduce_lr_threshold()) {
      total_size += 2 + 4;
    }

    // optional int32 reduce_lr_num_steps = 21 [default = 0];
    if (has_reduce_lr_num_steps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reduce_lr_num_steps());
    }

    // optional int32 reduce_lr_max = 22 [default = 0];
    if (has_reduce_lr_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reduce_lr_max());
    }

    // optional bool smaller_is_better = 23 [default = false];
    if (has_smaller_is_better()) {
      total_size += 2 + 1;
    }

    // optional int32 polyak_after = 24 [default = 0];
    if (has_polyak_after()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->polyak_after());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 polyak_queue_size = 25 [default = 0];
    if (has_polyak_queue_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->polyak_queue_size());
    }

  }
  // repeated .config.Layer layer = 2;
  total_size += 1 * this->layer_size();
  for (int i = 0; i < this->layer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layer(i));
  }

  // repeated .config.Edge edge = 3;
  total_size += 1 * this->edge_size();
  for (int i = 0; i < this->edge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge(i));
  }

  // repeated string timestamp = 15;
  total_size += 1 * this->timestamp_size();
  for (int i = 0; i < this->timestamp_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->timestamp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Model::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Model* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Model*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
  GOOGLE_CHECK_NE(&from, this);
  layer_.MergeFrom(from.layer_);
  edge_.MergeFrom(from.edge_);
  timestamp_.MergeFrom(from.timestamp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_max_iter()) {
      set_max_iter(from.max_iter());
    }
    if (from.has_display_after()) {
      set_display_after(from.display_after());
    }
    if (from.has_save_after()) {
      set_save_after(from.save_after());
    }
    if (from.has_image_size()) {
      set_image_size(from.image_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_patch_size()) {
      set_patch_size(from.patch_size());
    }
    if (from.has_print_after()) {
      set_print_after(from.print_after());
    }
    if (from.has_current_iter()) {
      set_current_iter(from.current_iter());
    }
    if (from.has_checkpoint_dir()) {
      set_checkpoint_dir(from.checkpoint_dir());
    }
    if (from.has_has_spatial_outputs()) {
      set_has_spatial_outputs(from.has_spatial_outputs());
    }
    if (from.has_display_spatial_output()) {
      set_display_spatial_output(from.display_spatial_output());
    }
    if (from.has_det_classifier()) {
      set_det_classifier(from.det_classifier());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_validate_after()) {
      set_validate_after(from.validate_after());
    }
    if (from.has_reduce_lr_factor()) {
      set_reduce_lr_factor(from.reduce_lr_factor());
    }
    if (from.has_reduce_lr_threshold()) {
      set_reduce_lr_threshold(from.reduce_lr_threshold());
    }
    if (from.has_reduce_lr_num_steps()) {
      set_reduce_lr_num_steps(from.reduce_lr_num_steps());
    }
    if (from.has_reduce_lr_max()) {
      set_reduce_lr_max(from.reduce_lr_max());
    }
    if (from.has_smaller_is_better()) {
      set_smaller_is_better(from.smaller_is_better());
    }
    if (from.has_polyak_after()) {
      set_polyak_after(from.polyak_after());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_polyak_queue_size()) {
      set_polyak_queue_size(from.polyak_queue_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Model::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  for (int i = 0; i < layer_size(); i++) {
    if (!this->layer(i).IsInitialized()) return false;
  }
  for (int i = 0; i < edge_size(); i++) {
    if (!this->edge(i).IsInitialized()) return false;
  }
  return true;
}

void Model::Swap(Model* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    layer_.Swap(&other->layer_);
    edge_.Swap(&other->edge_);
    std::swap(seed_, other->seed_);
    std::swap(max_iter_, other->max_iter_);
    std::swap(display_after_, other->display_after_);
    std::swap(save_after_, other->save_after_);
    std::swap(image_size_, other->image_size_);
    std::swap(patch_size_, other->patch_size_);
    std::swap(print_after_, other->print_after_);
    std::swap(current_iter_, other->current_iter_);
    std::swap(checkpoint_dir_, other->checkpoint_dir_);
    std::swap(has_spatial_outputs_, other->has_spatial_outputs_);
    std::swap(display_spatial_output_, other->display_spatial_output_);
    timestamp_.Swap(&other->timestamp_);
    std::swap(det_classifier_, other->det_classifier_);
    std::swap(display_, other->display_);
    std::swap(validate_after_, other->validate_after_);
    std::swap(reduce_lr_factor_, other->reduce_lr_factor_);
    std::swap(reduce_lr_threshold_, other->reduce_lr_threshold_);
    std::swap(reduce_lr_num_steps_, other->reduce_lr_num_steps_);
    std::swap(reduce_lr_max_, other->reduce_lr_max_);
    std::swap(smaller_is_better_, other->smaller_is_better_);
    std::swap(polyak_after_, other->polyak_after_);
    std::swap(polyak_queue_size_, other->polyak_queue_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Model::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Model_descriptor_;
  metadata.reflection = Model_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DatasetConfig_DatasetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetConfig_DatasetType_descriptor_;
}
bool DatasetConfig_DatasetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DatasetConfig_DatasetType DatasetConfig::DUMMY;
const DatasetConfig_DatasetType DatasetConfig::IMAGE_HDF5;
const DatasetConfig_DatasetType DatasetConfig::IMAGE_HDF5_MULT_POS;
const DatasetConfig_DatasetType DatasetConfig::IMAGENET_CLS_HDF5;
const DatasetConfig_DatasetType DatasetConfig::IMAGENET_CLS_HDF5_MULT_POS;
const DatasetConfig_DatasetType DatasetConfig::RAW_IMAGE;
const DatasetConfig_DatasetType DatasetConfig::HDF5;
const DatasetConfig_DatasetType DatasetConfig::IMAGE_POS_NEG_HDF5;
const DatasetConfig_DatasetType DatasetConfig::RAW_IMAGE_SLIDING_WINDOW;
const DatasetConfig_DatasetType DatasetConfig::DatasetType_MIN;
const DatasetConfig_DatasetType DatasetConfig::DatasetType_MAX;
const int DatasetConfig::DatasetType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DatasetConfig::kDataDirFieldNumber;
const int DatasetConfig::kDatasetTypeFieldNumber;
const int DatasetConfig::kBatchSizeFieldNumber;
const int DatasetConfig::kChunkSizeFieldNumber;
const int DatasetConfig::kLabelsFieldNumber;
const int DatasetConfig::kMaxReuseCountFieldNumber;
const int DatasetConfig::kPipelineLoadsFieldNumber;
const int DatasetConfig::kRandomizeCpuFieldNumber;
const int DatasetConfig::kMeanImageFileFieldNumber;
const int DatasetConfig::kStdImageFileFieldNumber;
const int DatasetConfig::kImageSizeFieldNumber;
const int DatasetConfig::kNormalizeImagesFieldNumber;
const int DatasetConfig::kPosFracFieldNumber;
const int DatasetConfig::kCropFieldNumber;
const int DatasetConfig::kDatasetValTypeFieldNumber;
const int DatasetConfig::kUseSamplingFieldNumber;
const int DatasetConfig::kRandomizeGpuFieldNumber;
const int DatasetConfig::kWarpFieldNumber;
const int DatasetConfig::kHasNoLabelsFieldNumber;
const int DatasetConfig::kPredictedBoxesFileFieldNumber;
const int DatasetConfig::kFilePatternFieldNumber;
const int DatasetConfig::kDatasetNameFieldNumber;
const int DatasetConfig::kCanTranslateFieldNumber;
const int DatasetConfig::kCanFlipFieldNumber;
const int DatasetConfig::kRandomAccessChunkSizeFieldNumber;
const int DatasetConfig::kGpuIdFieldNumber;
const int DatasetConfig::kMaxDatasetSizeFieldNumber;
const int DatasetConfig::kRawImageSizeFieldNumber;
const int DatasetConfig::kStrideFieldNumber;
const int DatasetConfig::kPixelwiseNormalizeFieldNumber;
const int DatasetConfig::kPcaNoiseStddevFieldNumber;
#endif  // !_MSC_VER

DatasetConfig::DatasetConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatasetConfig::InitAsDefaultInstance() {
}

DatasetConfig::DatasetConfig(const DatasetConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatasetConfig::SharedCtor() {
  _cached_size_ = 0;
  data_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dataset_type_ = 0;
  batch_size_ = 1;
  chunk_size_ = 1;
  max_reuse_count_ = 0;
  pipeline_loads_ = false;
  randomize_cpu_ = false;
  mean_image_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  std_image_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  image_size_ = 0;
  normalize_images_ = false;
  pos_frac_ = 1;
  crop_ = false;
  dataset_val_type_ = 0;
  use_sampling_ = false;
  randomize_gpu_ = false;
  warp_ = false;
  has_no_labels_ = false;
  predicted_boxes_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  can_translate_ = false;
  can_flip_ = false;
  random_access_chunk_size_ = 1;
  gpu_id_ = 0;
  max_dataset_size_ = 0;
  raw_image_size_ = 0;
  stride_ = 1;
  pixelwise_normalize_ = false;
  pca_noise_stddev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatasetConfig::~DatasetConfig() {
  SharedDtor();
}

void DatasetConfig::SharedDtor() {
  if (data_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete data_dir_;
  }
  if (mean_image_file_ != &::google::protobuf::internal::kEmptyString) {
    delete mean_image_file_;
  }
  if (std_image_file_ != &::google::protobuf::internal::kEmptyString) {
    delete std_image_file_;
  }
  if (predicted_boxes_file_ != &::google::protobuf::internal::kEmptyString) {
    delete predicted_boxes_file_;
  }
  if (file_pattern_ != &::google::protobuf::internal::kEmptyString) {
    delete file_pattern_;
  }
  if (this != default_instance_) {
  }
}

void DatasetConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetConfig_descriptor_;
}

const DatasetConfig& DatasetConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_convnet_5fconfig_2eproto();
  return *default_instance_;
}

DatasetConfig* DatasetConfig::default_instance_ = NULL;

DatasetConfig* DatasetConfig::New() const {
  return new DatasetConfig;
}

void DatasetConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data_dir()) {
      if (data_dir_ != &::google::protobuf::internal::kEmptyString) {
        data_dir_->clear();
      }
    }
    dataset_type_ = 0;
    batch_size_ = 1;
    chunk_size_ = 1;
    max_reuse_count_ = 0;
    pipeline_loads_ = false;
    randomize_cpu_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_mean_image_file()) {
      if (mean_image_file_ != &::google::protobuf::internal::kEmptyString) {
        mean_image_file_->clear();
      }
    }
    if (has_std_image_file()) {
      if (std_image_file_ != &::google::protobuf::internal::kEmptyString) {
        std_image_file_->clear();
      }
    }
    image_size_ = 0;
    normalize_images_ = false;
    pos_frac_ = 1;
    crop_ = false;
    dataset_val_type_ = 0;
    use_sampling_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    randomize_gpu_ = false;
    warp_ = false;
    has_no_labels_ = false;
    if (has_predicted_boxes_file()) {
      if (predicted_boxes_file_ != &::google::protobuf::internal::kEmptyString) {
        predicted_boxes_file_->clear();
      }
    }
    if (has_file_pattern()) {
      if (file_pattern_ != &::google::protobuf::internal::kEmptyString) {
        file_pattern_->clear();
      }
    }
    can_translate_ = false;
    can_flip_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    random_access_chunk_size_ = 1;
    gpu_id_ = 0;
    max_dataset_size_ = 0;
    raw_image_size_ = 0;
    stride_ = 1;
    pixelwise_normalize_ = false;
    pca_noise_stddev_ = 0;
  }
  labels_.Clear();
  dataset_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatasetConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string data_dir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_dir().data(), this->data_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dataset_type;
        break;
      }

      // required .config.DatasetConfig.DatasetType dataset_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataset_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::DatasetConfig_DatasetType_IsValid(value)) {
            set_dataset_type(static_cast< ::config::DatasetConfig_DatasetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_batch_size;
        break;
      }

      // optional int32 batch_size = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chunk_size;
        break;
      }

      // optional int32 chunk_size = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunk_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_size_)));
          set_has_chunk_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_labels;
        break;
      }

      // repeated int32 labels = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_labels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_labels())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_labels())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_labels;
        if (input->ExpectTag(48)) goto parse_max_reuse_count;
        break;
      }

      // optional int32 max_reuse_count = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_reuse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_reuse_count_)));
          set_has_max_reuse_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pipeline_loads;
        break;
      }

      // optional bool pipeline_loads = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pipeline_loads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pipeline_loads_)));
          set_has_pipeline_loads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_randomize_cpu;
        break;
      }

      // optional bool randomize_cpu = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randomize_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &randomize_cpu_)));
          set_has_randomize_cpu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_mean_image_file;
        break;
      }

      // optional string mean_image_file = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mean_image_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_image_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mean_image_file().data(), this->mean_image_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_std_image_file;
        break;
      }

      // optional string std_image_file = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_std_image_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_std_image_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->std_image_file().data(), this->std_image_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_image_size;
        break;
      }

      // optional int32 image_size = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_image_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_size_)));
          set_has_image_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_normalize_images;
        break;
      }

      // optional bool normalize_images = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normalize_images:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_images_)));
          set_has_normalize_images();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_pos_frac;
        break;
      }

      // optional float pos_frac = 13 [default = 1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_frac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_frac_)));
          set_has_pos_frac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_crop;
        break;
      }

      // optional bool crop = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crop_)));
          set_has_crop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_dataset_val_type;
        break;
      }

      // optional .config.DatasetConfig.DatasetType dataset_val_type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataset_val_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::DatasetConfig_DatasetType_IsValid(value)) {
            set_dataset_val_type(static_cast< ::config::DatasetConfig_DatasetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_use_sampling;
        break;
      }

      // optional bool use_sampling = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_sampling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_sampling_)));
          set_has_use_sampling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_randomize_gpu;
        break;
      }

      // optional bool randomize_gpu = 17 [default = false];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randomize_gpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &randomize_gpu_)));
          set_has_randomize_gpu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_warp;
        break;
      }

      // optional bool warp = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &warp_)));
          set_has_warp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_has_no_labels;
        break;
      }

      // optional bool has_no_labels = 19 [default = false];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_no_labels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_no_labels_)));
          set_has_has_no_labels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_predicted_boxes_file;
        break;
      }

      // optional string predicted_boxes_file = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_predicted_boxes_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predicted_boxes_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->predicted_boxes_file().data(), this->predicted_boxes_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_file_pattern;
        break;
      }

      // optional string file_pattern = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_pattern().data(), this->file_pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_dataset_name;
        break;
      }

      // repeated string dataset_name = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataset_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dataset_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dataset_name(this->dataset_name_size() - 1).data(),
            this->dataset_name(this->dataset_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_dataset_name;
        if (input->ExpectTag(184)) goto parse_can_translate;
        break;
      }

      // optional bool can_translate = 23 [default = false];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_translate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_translate_)));
          set_has_can_translate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_can_flip;
        break;
      }

      // optional bool can_flip = 24 [default = false];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_flip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_flip_)));
          set_has_can_flip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_random_access_chunk_size;
        break;
      }

      // optional int32 random_access_chunk_size = 25 [default = 1];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_access_chunk_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_access_chunk_size_)));
          set_has_random_access_chunk_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_gpu_id;
        break;
      }

      // optional int32 gpu_id = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_id_)));
          set_has_gpu_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_max_dataset_size;
        break;
      }

      // optional int32 max_dataset_size = 27 [default = 0];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_dataset_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_dataset_size_)));
          set_has_max_dataset_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_raw_image_size;
        break;
      }

      // optional int32 raw_image_size = 28 [default = 0];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raw_image_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raw_image_size_)));
          set_has_raw_image_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_stride;
        break;
      }

      // optional int32 stride = 29 [default = 1];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_pixelwise_normalize;
        break;
      }

      // optional bool pixelwise_normalize = 30 [default = false];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pixelwise_normalize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pixelwise_normalize_)));
          set_has_pixelwise_normalize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_pca_noise_stddev;
        break;
      }

      // optional float pca_noise_stddev = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pca_noise_stddev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pca_noise_stddev_)));
          set_has_pca_noise_stddev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatasetConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string data_dir = 1;
  if (has_data_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_dir().data(), this->data_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data_dir(), output);
  }

  // required .config.DatasetConfig.DatasetType dataset_type = 2;
  if (has_dataset_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dataset_type(), output);
  }

  // optional int32 batch_size = 3 [default = 1];
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->batch_size(), output);
  }

  // optional int32 chunk_size = 4 [default = 1];
  if (has_chunk_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chunk_size(), output);
  }

  // repeated int32 labels = 5;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->labels(i), output);
  }

  // optional int32 max_reuse_count = 6 [default = 0];
  if (has_max_reuse_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_reuse_count(), output);
  }

  // optional bool pipeline_loads = 7 [default = false];
  if (has_pipeline_loads()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->pipeline_loads(), output);
  }

  // optional bool randomize_cpu = 8 [default = false];
  if (has_randomize_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->randomize_cpu(), output);
  }

  // optional string mean_image_file = 9;
  if (has_mean_image_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mean_image_file().data(), this->mean_image_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->mean_image_file(), output);
  }

  // optional string std_image_file = 10;
  if (has_std_image_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->std_image_file().data(), this->std_image_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->std_image_file(), output);
  }

  // optional int32 image_size = 11;
  if (has_image_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->image_size(), output);
  }

  // optional bool normalize_images = 12;
  if (has_normalize_images()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->normalize_images(), output);
  }

  // optional float pos_frac = 13 [default = 1];
  if (has_pos_frac()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->pos_frac(), output);
  }

  // optional bool crop = 14 [default = false];
  if (has_crop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->crop(), output);
  }

  // optional .config.DatasetConfig.DatasetType dataset_val_type = 15;
  if (has_dataset_val_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->dataset_val_type(), output);
  }

  // optional bool use_sampling = 16;
  if (has_use_sampling()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->use_sampling(), output);
  }

  // optional bool randomize_gpu = 17 [default = false];
  if (has_randomize_gpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->randomize_gpu(), output);
  }

  // optional bool warp = 18 [default = false];
  if (has_warp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->warp(), output);
  }

  // optional bool has_no_labels = 19 [default = false];
  if (has_has_no_labels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->has_no_labels(), output);
  }

  // optional string predicted_boxes_file = 20;
  if (has_predicted_boxes_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predicted_boxes_file().data(), this->predicted_boxes_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->predicted_boxes_file(), output);
  }

  // optional string file_pattern = 21;
  if (has_file_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_pattern().data(), this->file_pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->file_pattern(), output);
  }

  // repeated string dataset_name = 22;
  for (int i = 0; i < this->dataset_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->dataset_name(i).data(), this->dataset_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->dataset_name(i), output);
  }

  // optional bool can_translate = 23 [default = false];
  if (has_can_translate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->can_translate(), output);
  }

  // optional bool can_flip = 24 [default = false];
  if (has_can_flip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->can_flip(), output);
  }

  // optional int32 random_access_chunk_size = 25 [default = 1];
  if (has_random_access_chunk_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->random_access_chunk_size(), output);
  }

  // optional int32 gpu_id = 26 [default = 0];
  if (has_gpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->gpu_id(), output);
  }

  // optional int32 max_dataset_size = 27 [default = 0];
  if (has_max_dataset_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->max_dataset_size(), output);
  }

  // optional int32 raw_image_size = 28 [default = 0];
  if (has_raw_image_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->raw_image_size(), output);
  }

  // optional int32 stride = 29 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->stride(), output);
  }

  // optional bool pixelwise_normalize = 30 [default = false];
  if (has_pixelwise_normalize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->pixelwise_normalize(), output);
  }

  // optional float pca_noise_stddev = 31 [default = 0];
  if (has_pca_noise_stddev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->pca_noise_stddev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatasetConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string data_dir = 1;
  if (has_data_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_dir().data(), this->data_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data_dir(), target);
  }

  // required .config.DatasetConfig.DatasetType dataset_type = 2;
  if (has_dataset_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dataset_type(), target);
  }

  // optional int32 batch_size = 3 [default = 1];
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->batch_size(), target);
  }

  // optional int32 chunk_size = 4 [default = 1];
  if (has_chunk_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chunk_size(), target);
  }

  // repeated int32 labels = 5;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->labels(i), target);
  }

  // optional int32 max_reuse_count = 6 [default = 0];
  if (has_max_reuse_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_reuse_count(), target);
  }

  // optional bool pipeline_loads = 7 [default = false];
  if (has_pipeline_loads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->pipeline_loads(), target);
  }

  // optional bool randomize_cpu = 8 [default = false];
  if (has_randomize_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->randomize_cpu(), target);
  }

  // optional string mean_image_file = 9;
  if (has_mean_image_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mean_image_file().data(), this->mean_image_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->mean_image_file(), target);
  }

  // optional string std_image_file = 10;
  if (has_std_image_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->std_image_file().data(), this->std_image_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->std_image_file(), target);
  }

  // optional int32 image_size = 11;
  if (has_image_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->image_size(), target);
  }

  // optional bool normalize_images = 12;
  if (has_normalize_images()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->normalize_images(), target);
  }

  // optional float pos_frac = 13 [default = 1];
  if (has_pos_frac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->pos_frac(), target);
  }

  // optional bool crop = 14 [default = false];
  if (has_crop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->crop(), target);
  }

  // optional .config.DatasetConfig.DatasetType dataset_val_type = 15;
  if (has_dataset_val_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->dataset_val_type(), target);
  }

  // optional bool use_sampling = 16;
  if (has_use_sampling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->use_sampling(), target);
  }

  // optional bool randomize_gpu = 17 [default = false];
  if (has_randomize_gpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->randomize_gpu(), target);
  }

  // optional bool warp = 18 [default = false];
  if (has_warp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->warp(), target);
  }

  // optional bool has_no_labels = 19 [default = false];
  if (has_has_no_labels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->has_no_labels(), target);
  }

  // optional string predicted_boxes_file = 20;
  if (has_predicted_boxes_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predicted_boxes_file().data(), this->predicted_boxes_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->predicted_boxes_file(), target);
  }

  // optional string file_pattern = 21;
  if (has_file_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_pattern().data(), this->file_pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->file_pattern(), target);
  }

  // repeated string dataset_name = 22;
  for (int i = 0; i < this->dataset_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataset_name(i).data(), this->dataset_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(22, this->dataset_name(i), target);
  }

  // optional bool can_translate = 23 [default = false];
  if (has_can_translate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->can_translate(), target);
  }

  // optional bool can_flip = 24 [default = false];
  if (has_can_flip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->can_flip(), target);
  }

  // optional int32 random_access_chunk_size = 25 [default = 1];
  if (has_random_access_chunk_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->random_access_chunk_size(), target);
  }

  // optional int32 gpu_id = 26 [default = 0];
  if (has_gpu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->gpu_id(), target);
  }

  // optional int32 max_dataset_size = 27 [default = 0];
  if (has_max_dataset_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->max_dataset_size(), target);
  }

  // optional int32 raw_image_size = 28 [default = 0];
  if (has_raw_image_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->raw_image_size(), target);
  }

  // optional int32 stride = 29 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->stride(), target);
  }

  // optional bool pixelwise_normalize = 30 [default = false];
  if (has_pixelwise_normalize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->pixelwise_normalize(), target);
  }

  // optional float pca_noise_stddev = 31 [default = 0];
  if (has_pca_noise_stddev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->pca_noise_stddev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatasetConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string data_dir = 1;
    if (has_data_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_dir());
    }

    // required .config.DatasetConfig.DatasetType dataset_type = 2;
    if (has_dataset_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dataset_type());
    }

    // optional int32 batch_size = 3 [default = 1];
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch_size());
    }

    // optional int32 chunk_size = 4 [default = 1];
    if (has_chunk_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk_size());
    }

    // optional int32 max_reuse_count = 6 [default = 0];
    if (has_max_reuse_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_reuse_count());
    }

    // optional bool pipeline_loads = 7 [default = false];
    if (has_pipeline_loads()) {
      total_size += 1 + 1;
    }

    // optional bool randomize_cpu = 8 [default = false];
    if (has_randomize_cpu()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string mean_image_file = 9;
    if (has_mean_image_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_image_file());
    }

    // optional string std_image_file = 10;
    if (has_std_image_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->std_image_file());
    }

    // optional int32 image_size = 11;
    if (has_image_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_size());
    }

    // optional bool normalize_images = 12;
    if (has_normalize_images()) {
      total_size += 1 + 1;
    }

    // optional float pos_frac = 13 [default = 1];
    if (has_pos_frac()) {
      total_size += 1 + 4;
    }

    // optional bool crop = 14 [default = false];
    if (has_crop()) {
      total_size += 1 + 1;
    }

    // optional .config.DatasetConfig.DatasetType dataset_val_type = 15;
    if (has_dataset_val_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dataset_val_type());
    }

    // optional bool use_sampling = 16;
    if (has_use_sampling()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool randomize_gpu = 17 [default = false];
    if (has_randomize_gpu()) {
      total_size += 2 + 1;
    }

    // optional bool warp = 18 [default = false];
    if (has_warp()) {
      total_size += 2 + 1;
    }

    // optional bool has_no_labels = 19 [default = false];
    if (has_has_no_labels()) {
      total_size += 2 + 1;
    }

    // optional string predicted_boxes_file = 20;
    if (has_predicted_boxes_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predicted_boxes_file());
    }

    // optional string file_pattern = 21;
    if (has_file_pattern()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_pattern());
    }

    // optional bool can_translate = 23 [default = false];
    if (has_can_translate()) {
      total_size += 2 + 1;
    }

    // optional bool can_flip = 24 [default = false];
    if (has_can_flip()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 random_access_chunk_size = 25 [default = 1];
    if (has_random_access_chunk_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_access_chunk_size());
    }

    // optional int32 gpu_id = 26 [default = 0];
    if (has_gpu_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu_id());
    }

    // optional int32 max_dataset_size = 27 [default = 0];
    if (has_max_dataset_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_dataset_size());
    }

    // optional int32 raw_image_size = 28 [default = 0];
    if (has_raw_image_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raw_image_size());
    }

    // optional int32 stride = 29 [default = 1];
    if (has_stride()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride());
    }

    // optional bool pixelwise_normalize = 30 [default = false];
    if (has_pixelwise_normalize()) {
      total_size += 2 + 1;
    }

    // optional float pca_noise_stddev = 31 [default = 0];
    if (has_pca_noise_stddev()) {
      total_size += 2 + 4;
    }

  }
  // repeated int32 labels = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->labels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->labels(i));
    }
    total_size += 1 * this->labels_size() + data_size;
  }

  // repeated string dataset_name = 22;
  total_size += 2 * this->dataset_name_size();
  for (int i = 0; i < this->dataset_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dataset_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatasetConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatasetConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatasetConfig::MergeFrom(const DatasetConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  dataset_name_.MergeFrom(from.dataset_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_dir()) {
      set_data_dir(from.data_dir());
    }
    if (from.has_dataset_type()) {
      set_dataset_type(from.dataset_type());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_chunk_size()) {
      set_chunk_size(from.chunk_size());
    }
    if (from.has_max_reuse_count()) {
      set_max_reuse_count(from.max_reuse_count());
    }
    if (from.has_pipeline_loads()) {
      set_pipeline_loads(from.pipeline_loads());
    }
    if (from.has_randomize_cpu()) {
      set_randomize_cpu(from.randomize_cpu());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mean_image_file()) {
      set_mean_image_file(from.mean_image_file());
    }
    if (from.has_std_image_file()) {
      set_std_image_file(from.std_image_file());
    }
    if (from.has_image_size()) {
      set_image_size(from.image_size());
    }
    if (from.has_normalize_images()) {
      set_normalize_images(from.normalize_images());
    }
    if (from.has_pos_frac()) {
      set_pos_frac(from.pos_frac());
    }
    if (from.has_crop()) {
      set_crop(from.crop());
    }
    if (from.has_dataset_val_type()) {
      set_dataset_val_type(from.dataset_val_type());
    }
    if (from.has_use_sampling()) {
      set_use_sampling(from.use_sampling());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_randomize_gpu()) {
      set_randomize_gpu(from.randomize_gpu());
    }
    if (from.has_warp()) {
      set_warp(from.warp());
    }
    if (from.has_has_no_labels()) {
      set_has_no_labels(from.has_no_labels());
    }
    if (from.has_predicted_boxes_file()) {
      set_predicted_boxes_file(from.predicted_boxes_file());
    }
    if (from.has_file_pattern()) {
      set_file_pattern(from.file_pattern());
    }
    if (from.has_can_translate()) {
      set_can_translate(from.can_translate());
    }
    if (from.has_can_flip()) {
      set_can_flip(from.can_flip());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_random_access_chunk_size()) {
      set_random_access_chunk_size(from.random_access_chunk_size());
    }
    if (from.has_gpu_id()) {
      set_gpu_id(from.gpu_id());
    }
    if (from.has_max_dataset_size()) {
      set_max_dataset_size(from.max_dataset_size());
    }
    if (from.has_raw_image_size()) {
      set_raw_image_size(from.raw_image_size());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_pixelwise_normalize()) {
      set_pixelwise_normalize(from.pixelwise_normalize());
    }
    if (from.has_pca_noise_stddev()) {
      set_pca_noise_stddev(from.pca_noise_stddev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatasetConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetConfig::CopyFrom(const DatasetConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DatasetConfig::Swap(DatasetConfig* other) {
  if (other != this) {
    std::swap(data_dir_, other->data_dir_);
    std::swap(dataset_type_, other->dataset_type_);
    std::swap(batch_size_, other->batch_size_);
    std::swap(chunk_size_, other->chunk_size_);
    labels_.Swap(&other->labels_);
    std::swap(max_reuse_count_, other->max_reuse_count_);
    std::swap(pipeline_loads_, other->pipeline_loads_);
    std::swap(randomize_cpu_, other->randomize_cpu_);
    std::swap(mean_image_file_, other->mean_image_file_);
    std::swap(std_image_file_, other->std_image_file_);
    std::swap(image_size_, other->image_size_);
    std::swap(normalize_images_, other->normalize_images_);
    std::swap(pos_frac_, other->pos_frac_);
    std::swap(crop_, other->crop_);
    std::swap(dataset_val_type_, other->dataset_val_type_);
    std::swap(use_sampling_, other->use_sampling_);
    std::swap(randomize_gpu_, other->randomize_gpu_);
    std::swap(warp_, other->warp_);
    std::swap(has_no_labels_, other->has_no_labels_);
    std::swap(predicted_boxes_file_, other->predicted_boxes_file_);
    std::swap(file_pattern_, other->file_pattern_);
    dataset_name_.Swap(&other->dataset_name_);
    std::swap(can_translate_, other->can_translate_);
    std::swap(can_flip_, other->can_flip_);
    std::swap(random_access_chunk_size_, other->random_access_chunk_size_);
    std::swap(gpu_id_, other->gpu_id_);
    std::swap(max_dataset_size_, other->max_dataset_size_);
    std::swap(raw_image_size_, other->raw_image_size_);
    std::swap(stride_, other->stride_);
    std::swap(pixelwise_normalize_, other->pixelwise_normalize_);
    std::swap(pca_noise_stddev_, other->pca_noise_stddev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatasetConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatasetConfig_descriptor_;
  metadata.reflection = DatasetConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace config

// @@protoc_insertion_point(global_scope)
